name: Deploy Keycloak Official Image to ECS

on:
  push:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: keycloak
  ECS_SERVICE: keycloak-service
  ECS_TASK_FAMILY: keycloak
  SECRET_NAME: "${{ secrets.SECRET_NAME }}"
  CONTAINER_NAME: keycloak
  ECR_REPOSITORY: keycloak
  IMAGE_TAG: ${{ github.sha }} # Docker 이미지 태그 (커밋 SHA)

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/githuboidc
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Build, tag, and push Docker image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Get secrets from Secrets Manager
        id: secrets
        run: |
          DB_CREDS=$(aws secretsmanager get-secret-value --secret-id $SECRET_NAME --query SecretString --output text)
          echo "KC_DB_USERNAME=$(echo $DB_CREDS | jq -r .username)" >> $GITHUB_ENV
          echo "KC_DB_PASSWORD=$(echo $DB_CREDS | jq -r .password)" >> $GITHUB_ENV

      - name: Register new ECS Task Definition revision
        id: register-task
        run: |
          cat <<EOF > task-def.json
          {
            "family": "${{ env.ECS_TASK_FAMILY }}",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "512",
            "memory": "1024",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
            "containerDefinitions": [
              {
                "name": "${{ env.CONTAINER_NAME }}",
                "image": "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
                "portMappings": [{ "containerPort": 8080 },{ "containerPort": 8443 }],
                "environment": [
                  { "name": "KEYCLOAK_ADMIN", "value": "admin" },
                  { "name": "KEYCLOAK_ADMIN_PASSWORD", "value": "admin" },
                  { "name": "KC_DB", "value": "postgres" },
                  { "name": "KC_DB_URL", "value": "jdbc:postgresql://keycloak.c2b2wgk08yd3.us-east-1.rds.amazonaws.com:5432/keycloak" },
                  { "name": "KC_HOSTNAME", "value": "keycloak.hyundong.shop" },
                  { "name": "KC_HTTP_ENABLED", "value": "true" },
                  { "name": "KC_PROXY_HEADERS", "value": "xforwarded" }
                ],
                "secrets": [
                  { "name": "KC_DB_USERNAME", "valueFrom": "arn:aws:secretsmanager:us-east-1:009215122583:secret:rds!db-0deeb6e5-429b-47e0-8b9a-2b46d98eb11d-1lLGmu:username::"},
                  { "name": "KC_DB_PASSWORD", "valueFrom": "arn:aws:secretsmanager:us-east-1:009215122583:secret:rds!db-0deeb6e5-429b-47e0-8b9a-2b46d98eb11d-1lLGmu:password::" }
                ],
                "command": ["start"],
                "essential": true,
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/keycloak",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "keycloak"
                  }
                }
              }
            ]
          }
          EOF

          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-def.json --query "taskDefinition.taskDefinitionArn" --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEF_ARN }} \
            --force-new-deployment
